// This file is automatically generated by a script based on the CommandBuilder API.
// This file adds additional overloads to the CommandBuilder API.
using Unity.Burst;
using UnityEngine;
using System.Collections.Generic;
using Unity.Collections;
using Unity.Mathematics;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Jobs;
using static Pathfinding.Drawing.CommandBuilder;

namespace Pathfinding.Drawing {
	public partial struct CommandBuilder2D {
		/// <summary>\copydocref{CommandBuilder.WithMatrix(Matrix4x4)}</summary>
		[BurstDiscard]
		public ScopeMatrix WithMatrix (Matrix4x4 matrix) {
			return draw.WithMatrix(matrix);
		}
		/// <summary>\copydocref{CommandBuilder.WithColor(Color)}</summary>
		[BurstDiscard]
		public ScopeColor WithColor (Color color) {
			return draw.WithColor(color);
		}

















		/// <summary>\copydocref{CommandBuilder.Line(Vector3,Vector3)}</summary>
		public void Line (Vector3 a, Vector3 b) {
			draw.Line(a, b);
		}
		/// <summary>\copydocref{CommandBuilder.Line(Vector3,Vector3)}</summary>
		public void Line (Vector2 a, Vector2 b) {
			Line(xy ? new Vector3(a.x, a.y, 0) : new Vector3(a.x, 0, a.y), xy ? new Vector3(b.x, b.y, 0) : new Vector3(b.x, 0, b.y));
		}
		/// <summary>\copydocref{CommandBuilder.Line(Vector3,Vector3,Color)}</summary>
		public void Line (Vector3 a, Vector3 b, Color color) {
			draw.Line(a, b, color);
		}
		/// <summary>\copydocref{CommandBuilder.Line(Vector3,Vector3,Color)}</summary>
		public void Line (Vector2 a, Vector2 b, Color color) {
			Line(xy ? new Vector3(a.x, a.y, 0) : new Vector3(a.x, 0, a.y), xy ? new Vector3(b.x, b.y, 0) : new Vector3(b.x, 0, b.y), color);
		}
		/// <summary>\copydocref{CommandBuilder.Ray(float3,float3)}</summary>
		public void Ray (float3 origin, float3 direction) {
			draw.Ray(origin, direction);
		}
		/// <summary>\copydocref{CommandBuilder.Ray(float3,float3)}</summary>
		public void Ray (float2 origin, float2 direction) {
			Ray(xy ? new float3(origin, 0) : new float3(origin.x, 0, origin.y), xy ? new float3(direction, 0) : new float3(direction.x, 0, direction.y));
		}
		/// <summary>\copydocref{CommandBuilder.Ray(Ray,float)}</summary>
		public void Ray (Ray ray, float length) {
			draw.Ray(ray, length);
		}




		/// <summary>\copydocref{CommandBuilder.Circle(float3,float3,float)}</summary>
		public void Circle (float3 center, float3 normal, float radius) {
			draw.Circle(center, normal, radius);
		}
		/// <summary>\copydocref{CommandBuilder.Circle(float3,float3,float)}</summary>
		public void Circle (float2 center, float2 normal, float radius) {
			Circle(xy ? new float3(center, 0) : new float3(center.x, 0, center.y), xy ? new float3(normal, 0) : new float3(normal.x, 0, normal.y), radius);
		}




		/// <summary>\copydocref{CommandBuilder.Polyline(List&lt;Vector3&gt;,bool)}</summary>
		[BurstDiscard]
		public void Polyline (List<Vector3> points, bool cycle = false) {
			draw.Polyline(points, cycle);
		}
		/// <summary>\copydocref{CommandBuilder.Polyline(Vector3[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (Vector3[] points, bool cycle = false) {
			draw.Polyline(points, cycle);
		}
		/// <summary>\copydocref{CommandBuilder.Polyline(float3[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (float3[] points, bool cycle = false) {
			draw.Polyline(points, cycle);
		}
		/// <summary>\copydocref{CommandBuilder.Polyline(NativeArray&lt;float3&gt;,bool)}</summary>
		public void Polyline (NativeArray<float3> points, bool cycle = false) {
			draw.Polyline(points, cycle);
		}
		/// <summary>\copydocref{CommandBuilder.Cross(float3,float)}</summary>
		public void Cross (float3 position, float size = 1) {
			draw.Cross(position, size);
		}





		/// <summary>\copydocref{CommandBuilder.Arrow(float3,float3)}</summary>
		public void Arrow (float3 from, float3 to) {
			ArrowRelativeSizeHead(from, to, xy ? XY_UP : XZ_UP, 0.2f);
		}
		/// <summary>\copydocref{CommandBuilder.Arrow(float3,float3)}</summary>
		public void Arrow (float2 from, float2 to) {
			Arrow(xy ? new float3(from, 0) : new float3(from.x, 0, from.y), xy ? new float3(to, 0) : new float3(to.x, 0, to.y));
		}
		/// <summary>\copydocref{CommandBuilder.Arrow(float3,float3,float3,float)}</summary>
		public void Arrow (float3 from, float3 to, float3 up, float headSize) {
			draw.Arrow(from, to, up, headSize);
		}
		/// <summary>\copydocref{CommandBuilder.Arrow(float3,float3,float3,float)}</summary>
		public void Arrow (float2 from, float2 to, float2 up, float headSize) {
			Arrow(xy ? new float3(from, 0) : new float3(from.x, 0, from.y), xy ? new float3(to, 0) : new float3(to.x, 0, to.y), xy ? new float3(up, 0) : new float3(up.x, 0, up.y), headSize);
		}
		/// <summary>\copydocref{CommandBuilder.ArrowRelativeSizeHead(float3,float3,float3,float)}</summary>
		public void ArrowRelativeSizeHead (float3 from, float3 to, float3 up, float headFraction) {
			draw.ArrowRelativeSizeHead(from, to, up, headFraction);
		}
		/// <summary>\copydocref{CommandBuilder.ArrowRelativeSizeHead(float3,float3,float3,float)}</summary>
		public void ArrowRelativeSizeHead (float2 from, float2 to, float2 up, float headFraction) {
			ArrowRelativeSizeHead(xy ? new float3(from, 0) : new float3(from.x, 0, from.y), xy ? new float3(to, 0) : new float3(to.x, 0, to.y), xy ? new float3(up, 0) : new float3(up.x, 0, up.y), headFraction);
		}
































		/// <summary>\copydocref{Ray(float3,float3)}</summary>
		public void Ray (float3 origin, float3 direction, Color color) {
			draw.Ray(origin, direction, color);
		}
		/// <summary>\copydocref{Ray(float2,float2)}</summary>
		public void Ray (float2 origin, float2 direction, Color color) {
			Ray(xy ? new float3(origin, 0) : new float3(origin.x, 0, origin.y), xy ? new float3(direction, 0) : new float3(direction.x, 0, direction.y), color);
		}
		/// <summary>\copydocref{Ray(Ray,float)}</summary>
		public void Ray (Ray ray, float length, Color color) {
			draw.Ray(ray, length, color);
		}






		/// <summary>\copydocref{Circle(float3,float3,float)}</summary>
		public void Circle (float3 center, float3 normal, float radius, Color color) {
			draw.Circle(center, normal, radius, color);
		}
		/// <summary>\copydocref{Circle(float2,float2,float)}</summary>
		public void Circle (float2 center, float2 normal, float radius, Color color) {
			Circle(xy ? new float3(center, 0) : new float3(center.x, 0, center.y), xy ? new float3(normal, 0) : new float3(normal.x, 0, normal.y), radius, color);
		}




		/// <summary>\copydocref{Polyline(List&lt;Vector3&gt;,bool)}</summary>
		[BurstDiscard]
		public void Polyline (List<Vector3> points, bool cycle, Color color) {
			draw.Polyline(points, cycle, color);
		}
		/// <summary>\copydocref{Polyline(List&lt;Vector3&gt;,bool)}</summary>
		[BurstDiscard]
		public void Polyline (List<Vector3> points, Color color) {
			Polyline(points, false, color);
		}
		/// <summary>\copydocref{Polyline(Vector3[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (Vector3[] points, bool cycle, Color color) {
			draw.Polyline(points, cycle, color);
		}
		/// <summary>\copydocref{Polyline(Vector3[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (Vector3[] points, Color color) {
			Polyline(points, false, color);
		}
		/// <summary>\copydocref{Polyline(float3[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (float3[] points, bool cycle, Color color) {
			draw.Polyline(points, cycle, color);
		}
		/// <summary>\copydocref{Polyline(float3[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (float3[] points, Color color) {
			Polyline(points, false, color);
		}
		/// <summary>\copydocref{Polyline(NativeArray&lt;float3&gt;,bool)}</summary>
		public void Polyline (NativeArray<float3> points, bool cycle, Color color) {
			draw.Polyline(points, cycle, color);
		}
		/// <summary>\copydocref{Polyline(NativeArray&lt;float3&gt;,bool)}</summary>
		public void Polyline (NativeArray<float3> points, Color color) {
			Polyline(points, false, color);
		}
		/// <summary>\copydocref{Cross(float3,float)}</summary>
		public void Cross (float3 position, float size, Color color) {
			draw.Cross(position, size, color);
		}
		/// <summary>\copydocref{Cross(float3,float)}</summary>
		public void Cross (float3 position, Color color) {
			Cross(position, 1, color);
		}





		/// <summary>\copydocref{Arrow(float3,float3)}</summary>
		public void Arrow (float3 from, float3 to, Color color) {
			ArrowRelativeSizeHead(from, to, xy ? XY_UP : XZ_UP, 0.2f, color);
		}
		/// <summary>\copydocref{Arrow(float2,float2)}</summary>
		public void Arrow (float2 from, float2 to, Color color) {
			Arrow(xy ? new float3(from, 0) : new float3(from.x, 0, from.y), xy ? new float3(to, 0) : new float3(to.x, 0, to.y), color);
		}
		/// <summary>\copydocref{Arrow(float3,float3,float3,float)}</summary>
		public void Arrow (float3 from, float3 to, float3 up, float headSize, Color color) {
			draw.Arrow(from, to, up, headSize, color);
		}
		/// <summary>\copydocref{Arrow(float2,float2,float2,float)}</summary>
		public void Arrow (float2 from, float2 to, float2 up, float headSize, Color color) {
			Arrow(xy ? new float3(from, 0) : new float3(from.x, 0, from.y), xy ? new float3(to, 0) : new float3(to.x, 0, to.y), xy ? new float3(up, 0) : new float3(up.x, 0, up.y), headSize, color);
		}
		/// <summary>\copydocref{ArrowRelativeSizeHead(float3,float3,float3,float)}</summary>
		public void ArrowRelativeSizeHead (float3 from, float3 to, float3 up, float headFraction, Color color) {
			draw.ArrowRelativeSizeHead(from, to, up, headFraction, color);
		}
		/// <summary>\copydocref{ArrowRelativeSizeHead(float2,float2,float2,float)}</summary>
		public void ArrowRelativeSizeHead (float2 from, float2 to, float2 up, float headFraction, Color color) {
			ArrowRelativeSizeHead(xy ? new float3(from, 0) : new float3(from.x, 0, from.y), xy ? new float3(to, 0) : new float3(to.x, 0, to.y), xy ? new float3(up, 0) : new float3(up.x, 0, up.y), headFraction, color);
		}












































		/// <summary>\copydocref{Line(float3,float3)}</summary>
		public void Line (float3 a, float3 b, Color color) {
			draw.Line(a, b, color);
		}
		/// <summary>\copydocref{Circle(float2,float,float,float)}</summary>
		/// <param name="color">Color of the object</param>
		public void Circle (float2 center, float radius, float startAngle, float endAngle, Color color) {
			Circle(new float3(center, 0), radius, startAngle, endAngle, color);
		}
		/// <summary>\copydocref{Circle(float2,float,float,float)}</summary>
		/// <param name="color">Color of the object</param>
		public void Circle (float2 center, float radius, Color color) {
			Circle(center, radius, 0f, 2 * math.PI, color);
		}
		/// <summary>\copydocref{Circle(float3,float,float,float)}</summary>
		/// <param name="color">Color of the object</param>
		public void Circle (float3 center, float radius, float startAngle, float endAngle, Color color) {
			draw.PushColor(color);
			if (xy) draw.PushMatrix(XZ_TO_XY_MATRIX);
			draw.CircleXZInternal(new float3(center.x, -center.z, center.y), radius, startAngle, endAngle);
			if (xy) draw.PopMatrix();
			draw.PopColor();
		}
		/// <summary>\copydocref{Circle(float3,float,float,float)}</summary>
		/// <param name="color">Color of the object</param>
		public void Circle (float3 center, float radius, Color color) {
			Circle(center, radius, 0f, 2 * math.PI, color);
		}






		/// <summary>\copydocref{Polyline(List&lt;Vector2&gt;,bool)}</summary>
		[BurstDiscard]
		public void Polyline (List<Vector2> points, bool cycle, Color color) {
			draw.PushColor(color);
			for (int i = 0; i < points.Count - 1; i++) {
				Line(points[i], points[i+1]);
			}
			if (cycle && points.Count > 1) Line(points[points.Count - 1], points[0]);
			draw.PopColor();
		}
		/// <summary>\copydocref{Polyline(List&lt;Vector2&gt;,bool)}</summary>
		[BurstDiscard]
		public void Polyline (List<Vector2> points, Color color) {
			Polyline(points, false, color);
		}
		/// <summary>\copydocref{Polyline(Vector2[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (Vector2[] points, bool cycle, Color color) {
			draw.PushColor(color);
			for (int i = 0; i < points.Length - 1; i++) {
				Line(points[i], points[i+1]);
			}
			if (cycle && points.Length > 1) Line(points[points.Length - 1], points[0]);
			draw.PopColor();
		}
		/// <summary>\copydocref{Polyline(Vector2[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (Vector2[] points, Color color) {
			Polyline(points, false, color);
		}
		/// <summary>\copydocref{Polyline(float2[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (float2[] points, bool cycle, Color color) {
			draw.PushColor(color);
			for (int i = 0; i < points.Length - 1; i++) {
				Line(points[i], points[i+1]);
			}
			if (cycle && points.Length > 1) Line(points[points.Length - 1], points[0]);
			draw.PopColor();
		}
		/// <summary>\copydocref{Polyline(float2[],bool)}</summary>
		[BurstDiscard]
		public void Polyline (float2[] points, Color color) {
			Polyline(points, false, color);
		}
		/// <summary>\copydocref{Polyline(NativeArray&lt;float2&gt;,bool)}</summary>
		public void Polyline (NativeArray<float2> points, bool cycle, Color color) {
			draw.PushColor(color);
			for (int i = 0; i < points.Length - 1; i++) {
				Line(points[i], points[i+1]);
			}
			if (cycle && points.Length > 1) Line(points[points.Length - 1], points[0]);
			draw.PopColor();
		}
		/// <summary>\copydocref{Polyline(NativeArray&lt;float2&gt;,bool)}</summary>
		public void Polyline (NativeArray<float2> points, Color color) {
			Polyline(points, false, color);
		}
		/// <summary>\copydocref{Cross(float2,float)}</summary>
		public void Cross (float2 position, float size, Color color) {
			draw.PushColor(color);
			size *= 0.5f;
			Line(position - new float2(size, 0), position + new float2(size, 0));
			Line(position - new float2(0, size), position + new float2(0, size));
			draw.PopColor();
		}
		/// <summary>\copydocref{Cross(float2,float)}</summary>
		public void Cross (float2 position, Color color) {
			Cross(position, 1, color);
		}



		/// <summary>\copydocref{WireGrid(float2,int2,float2)}</summary>
		/// <param name="color">Color of the object</param>
		public void WireGrid (float2 center, int2 cells, float2 totalSize, Color color) {
			draw.WireGrid(xy ? new float3(center, 0) : new float3(center.x, 0, center.y), xy ? XY_TO_XZ_ROTATION : XZ_TO_XZ_ROTATION, cells, totalSize, color);
		}
		/// <summary>\copydocref{WireGrid(float3,int2,float2)}</summary>
		/// <param name="color">Color of the object</param>
		public void WireGrid (float3 center, int2 cells, float2 totalSize, Color color) {
			draw.WireGrid(center, xy ? XY_TO_XZ_ROTATION : XZ_TO_XZ_ROTATION, cells, totalSize, color);
		}
	}
}
