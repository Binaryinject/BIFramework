---
--- Generated by EBGAME
--- Created by lwn.
--- DateTime: 2021/02/08 05:15:32
---

---@class Global Global
---@field ServerTime number
---@field DeviceInfo DeviceInfo 设备信息（only read）
---@field PhotoDetails table<string, pb.PhotoDetail> 本地所有带目标的照片的信息（only read）
---@field SolarTermIds number[]
---@field IsLoginSdk boolean 是否需要登陆第三方SDK（only read）
---@field HeroAttackLevel number 英雄攻击动作的优先级（only read）
---@field HeroFallLevel number 英雄坠落动作的优先级（only read）
---@field HeroFishingLevel number 英雄钓鱼动作的优先级（only read）
---@field MonsterAttackLevel number 怪物攻击动作的优先级（only read）
---@field SyncServerTime fun(self:Global):void
---@field GetServerTime fun(self:Global):number 服务器的UnixTime
local _global = class("Global")

--region ===================== 扩展的数据类型 =====================
--- 放自定义的结构体、枚举等

---@class ButtletInfo 子弹的基本数据
---@field radius number 子弹半径
---@field speed number 子弹速度
---@field maxTime number 子弹最大飞行时间
---@field gravity number 子弹重力
---@field collisionLayers number 子弹碰撞层

---@class TimeInfo
---@field year number 年
---@field month number 月
---@field day number 日
---@field hour number 时
---@field minute number 分
---@field second number 秒

---@type pb.Userdata 本地缓存的用户数据
local userdata

---@class BagType 背包类型枚举
---@field Normal number value = 1
---@field Equipment number value = 2
---@field Food number value = 3
---@field Bead number value = 4
---@field Tool number value = 5
BagType = {
    Normal = 1,
    Equipment = 2,
    Food = 3,
    Bead = 4,
    Tool = 5
}

---@field Hero number value = 1
---@field Npc number value = 2
---@field Monster number value = 3
---@field Item number value = 4
---@class ActorType 参与者类型枚举
ActorType = {
    Hero = 1,
    Npc = 2,
    Monster = 3,
    Item = 4
}

---@field Prestige number 声望等级
---@field Village number 村子等级
---@field Social number 社交等级
---@field Environment number 环境等级
---@class AccountType
AccountType = {
    Prestige = 0,
    Village = 1,
    Social = 2,
    Environment = 3
}

---@field Lock number 锁定
---@field Unlock number 解锁
---@field Making number 使用中
---@field Finish number 待收获
---@class SlotState
SlotState = {
    Lock = 1,
    Unlock = 2,
    Making = 3,
    Finish = 4
}

---@field Eatfood number 吃食物信息
---@class TipType 提示类型
TipType = {
    Eatfood = 0
}

--endregion

--region ======================== 成员变量 ========================

---屏幕分辨率（在启动时初始化）
---@type Vector2
_global.screenResolutionRatio = Vector2.New(1920, 1080)

_global.photoDirectory = CS.UnityEngine.Application.persistentDataPath .. "/GamePhoto"

---@type number
_global._localTime = 0

---@private
---@type number
_global._serverTime = 0
function _global.Get:ServerTime()
    return self._serverTime
end
function _global.Set:ServerTime(value)
    ---@private
    self._serverTime = value
    ---@private
    self._localTime = os.time()
end

---@private
---@type DeviceInfo
_global._deviceInfo = unmanaged
function _global.Get:DeviceInfo()
    return self._deviceInfo
end

---本地所有带详情的照片的信息
---@private
---@type table<string, pb.PhotoDetail>
_global._photoDetails = {}
function _global.Get:PhotoDetails()
    return self._photoDetails
end

---当前满足的节气编号
---@private
---@type number[]
_global._solarTermIds = {}
function _global.Set:SolarTermIds(value)
    self.Season = -1
    self.SolarTerms = -1
    self.Phenology = {}
    self.Festival = {}
    local list = List(CS.System.Int32)()
    for _, v in pairs(value) do
        if v >= 0 and v <= 3 then
            self.Season = v
        elseif v >= 4 and v <= 27 then
            self.SolarTerms = v
        elseif v >= 28 and v <= 99 then
            table.insert(self.Phenology, v)
        elseif v > 99 then
            table.insert(self.Festival, v)
        end
        list:Add(v)
    end
    self._solarTermIds = value
    WfcSO.timeSlices = list
    Debug.Log("SolarTermIds: {1}", serpent.block(value))
end
function _global.Get:SolarTermIds()
    return self._solarTermIds
end

function _global.Get:IsLoginSdk()
    return GlobalSO.isLoginSdk and Account.Platform < 3
end

---@private
---@type number
_global._heroAttackLevel = -1
function _global.Get:HeroAttackLevel()
    if self._heroAttackLevel == -1 then
        ---@private
        self._heroAttackLevel = ActionGroupSO:GetAction(0, AG_Hero.Attack1).level
    end
    return self._heroAttackLevel
end

---@private
---@type number
_global._heroFallLevel = -1
function _global.Get:HeroFallLevel()
    if self._heroFallLevel == -1 then
        ---@private
        self._heroFallLevel = ActionGroupSO:GetAction(0, AG_Hero.Fall).level
    end
    return self._heroFallLevel
end

---@private
---@type number
_global._heroFishingLevel = -1
function _global.Get:HeroFishingLevel()
    if self._heroFishingLevel == -1 then
        ---@private
        self._heroFishingLevel = ActionGroupSO:GetAction(0, AG_Hero.FishingStart).level
    end
    return self._heroFishingLevel
end

---@private
---@type number
_global._monsterAttackLevel = -1
function _global.Get:MonsterAttackLevel()
    if self._monsterAttackLevel == -1 then
        ---@private
        self._monsterAttackLevel = ActionGroupSO:GetAction(1, AG_Monster.Attack).level
    end
    return self._monsterAttackLevel
end

---季节
_global.Season = -1

---节气
_global.SolarTerms = -1

---物候数组
_global.Phenology = {}

---节日数组
_global.Festival = {}

--endregion

--region ======================== 成员方法 ========================

---@private
function _global:ctor()
    ---@class DeviceInfo
    local deviceInfo = {
        deviceUniqueIdentifier = SystemInfo.deviceUniqueIdentifier,
        deviceModel = SystemInfo.deviceModel,
        deviceName = SystemInfo.deviceName,
        deviceType = tostring(SystemInfo.deviceType),
        operatingSystem = SystemInfo.operatingSystem,
        operatingSystemFamily = tostring(SystemInfo.operatingSystemFamily),
        systemMemorySize = tostring(SystemInfo.systemMemorySize),
        processorType = SystemInfo.processorType,
        processorFrequency = tostring(SystemInfo.processorFrequency),
        processorCount = tostring(SystemInfo.processorCount),
        graphicsDeviceVersion = SystemInfo.graphicsDeviceVersion,
        graphicsDeviceType = tostring(SystemInfo.graphicsDeviceType),
        graphicsDeviceName = SystemInfo.graphicsDeviceName,
        graphicsMemorySize = tostring(SystemInfo.graphicsMemorySize)
    }
    Debug.Log("deviceInfo = {1}", serpent.block(deviceInfo))
    ---@private
    self._deviceInfo = deviceInfo
end

--region 本地数据

---@return pb.Userdata
function _global.ReadUserData()
    local path = Application.persistentDataPath .. "/userdata.dat"
    if File.Exists(path) then
        try {
            function()
                local bytes = File.ReadAllBytes(path)
                local key = UnityBridge.StringToBytes("eb6s.com-0123456");
                local data = Util.AESDecrypt2(bytes, key, key)
                userdata = pb.decode(ProtoID.client_userdata, data)
                Debug.Log("读取本地用户数据成功: {1}", serpent.block(userdata))
            end,
            catch = function(e)
                Debug.Log("读取本地用户数据成功: {1}", e)
            end
        }
    end
    return userdata
end

function _global.SaveUserData()
    userdata = {}
    userdata.channel = Account.Channel
    userdata.platform = Account.Platform
    userdata.accountId = Account.SID
    userdata.accountName = Account.Name
    userdata.playerName = Player.Name
    userdata.playerId = Player.ID
    userdata.loginDays = Player.LoginDays
    userdata.helpFlag = Player.HelpFlag

    local bytes = pb.encode(ProtoID.client_userdata, userdata)
    local key = UnityBridge.StringToBytes("eb6s.com-0123456");
    local data = Util.AESEncrypt2(bytes, key, key)
    File.WriteAllBytes(Application.persistentDataPath .. "/userdata.dat", data)
    Debug.Log("保存用户数据成功: " .. serpent.block(userdata))
end

function _global:InitPhotoDetails()
    if Directory.Exists(self.photoDirectory) then
        local files = Directory.GetFiles(self.photoDirectory, "*.json")
        local count = files.Length - 1
        local start = string.len("GamePhoto") + 2
        for i = 0, count do
            local bytes = File.ReadAllBytes(files[i])
            local key = UnityBridge.StringToBytes("eb6s.com-0123456");
            local data = Util.AESDecrypt2(bytes, key, key)
            ---@type pb.PhotoDetail
            local detail = pb.decode(ProtoID.client_photodetail, data)
            local array = string.split(files[i], "/")
            local name = string.sub(string.split(array[#array], ".")[1], start)
            Debug.Log("加载 {1} 成功: {2}", name, serpent.block(detail))
            self._photoDetails[name] = detail
        end
    end
end

---@param png System.Byte[]
---@param detail pb.PhotoDetail
function _global:SavePhoto(fileName, png, detail)
    if not Directory.Exists(self.photoDirectory) then
        Directory.CreateDirectory(self.photoDirectory)
    end

    -- 保存png
    File.WriteAllBytes(self.photoDirectory .. "/" .. fileName .. ".png", png)

    if detail.id ~= "" then
        -- 保存json
        local bytes = pb.encode(ProtoID.client_photodetail, detail)
        local key = UnityBridge.StringToBytes("eb6s.com-0123456");
        local data = Util.AESEncrypt2(bytes, key, key)
        File.WriteAllBytes(self.photoDirectory .. "/" .. fileName .. ".json", data)
        Debug.Log("保存 {1}.json 成功: {2}", fileName, serpent.block(detail))
        self._photoDetails[fileName] = detail
    end
end

--endregion

---获取参与者名字
---@param type ActorType 参与者类型
---@param id number 参与者ID（物品取对应格子ID）
---@return string 默认值""
function _global.GetActorName(type, id)
    id = tostring(id)
    if type == ActorType.Hero then
        if Game.Players[id] then
            return Game.Players[id].name
        else
            Debug.Log("[GetActorName]无效 Hero ID: {1}", id)
        end
    elseif type == ActorType.Npc then
        if Map.RuntimeNpc[id] then
            return Map.RuntimeNpc[id].Config.Name
        else
            Debug.Log("[GetActorName]无效 Npc ID: {1}", id)
        end
    elseif type == ActorType.Monster then
        if Map.RuntimeMonster[id] then
            return Map.RuntimeMonster[id].Config.Name
        else
            if Map.RuntimeResource[id] then
                return Configs.RoleMonster[Map.RuntimeResource[id].cid].Name
            else
                if Map.DynamicRules[id] then
                    return Configs.RoleMonster[Map.DynamicRules[id].cid].Name
                else
                    Debug.Log("[GetActorName]无效 Monster ID: {1}", id)
                end
            end
        end
    elseif type == ActorType.Item then
        if Map.Pieces[id] then
            return Configs.PieceConfig[tostring(Map.Pieces[id].code.cid)].Name
        else
            if Map.RuntimeResource[id] then
                return Configs.RoleMonster[Map.RuntimeResource[id].cid].Name
            else
                if Map.DynamicRules[id] then
                    return Configs.RoleMonster[Map.DynamicRules[id].cid].Name
                else
                    Debug.Log("[GetActorName]无效 Item ID: {1}", id)
                end
            end
        end
    end
    return ""
end

---@param group number
---@param action number
---@return number level
function _global.GetActionLevel(group, action)
    return ActionGroupSO:GetAction(group, action).level
end

---@param self Global
---@return void
_global.SyncServerTime = async(function(self)
    ---@type pb.Player_GetServerTime_SC
    local data = await(NetMgr:GetServerTime())
    if data then
        ---@private
        self._serverTime = data.time
    end

    ---@private
    self._localTime = os.time()
end)

---@param self Global
---@return number 服务器的UnixTime
_global.GetServerTime = async(function(self)
    if self._serverTime == 0 then
        ---@type pb.Player_GetServerTime_SC
        local data = await(NetMgr:GetServerTime())
        if data then
            ---@private
            self._serverTime = data.time
        end
    else
        ---@private
        self._serverTime = self._serverTime + (os.time() - self._localTime)
    end

    ---@private
    self._localTime = os.time()
    return self._serverTime
end)

---@param unixTime number 时间戳
---@return TimeInfo
function _global.TimeFormart(unixTime)
    ---@type TimeInfo
    local tb = {
        year = 0,
        month = 0,
        day = 0,
        hour = 0,
        minute = 0,
        second = 0
    }
    if unixTime and unixTime > 0 then
        tb.year = tonumber(os.date("%Y", unixTime))
        tb.month = tonumber(os.date("%m", unixTime))
        tb.day = tonumber(os.date("%d", unixTime))
        tb.hour = tonumber(os.date("%H", unixTime))
        tb.minute = tonumber(os.date("%M", unixTime))
        tb.second = tonumber(os.date("%S", unixTime))
    end
    return tb
end

---@param time number 时间差（秒）
---@return TimeInfo
function _global.TimeTo(time)
    ---@type TimeInfo
    local tb = {
        year = 0,
        month = 0,
        day = 0,
        hour = 0,
        minute = 0,
        second = 0
    }
    if time and time > 0 then
        if time > 60 then
            --超过一分钟
            tb.second = time % 86400 % 3600 % 60
            tb.minute = math.floor(time % 86400 % 3600 / 60)
            if time > 3600 then
                --超过一小时
                tb.hour = math.floor(time % 86400 / 3600)
                if time > 86400 then
                    --超过一日
                    tb.day = math.floor(time % 2592000 / 86400)
                    if time > 2592000 then
                        --超过一月
                        tb.month = math.floor(time % 946080000 / 2592000)
                        if time > 946080000 then
                            --超过一年
                            tb.year = math.floor(time / 946080000)
                        end
                    end
                end
            end
        else
            tb.second = time
        end
    end
    return tb
end

--endregion

Global = _global()