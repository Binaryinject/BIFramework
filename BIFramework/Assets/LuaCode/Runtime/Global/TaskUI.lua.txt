---
--- Generated by EBGAME
--- Created by wbn.
--- DateTime: 2021/03/03 02:45:24
---

---@class TaskUI TaskUI
TaskUI = class("TaskUI")

TaskUI.root = weak
TaskUI.Fixed = weak
TaskUI.Normal = weak
TaskUI.Popup = weak
TaskUI.uiCamera = weak
TaskUI.init = false


TaskUI.allPages = {}

function TaskUI.Setup()
    if GameObject.Find("UITask") then
        return
    end
    local go = GameObject("UITask")
    go.layer = LayerMask.NameToLayer("UI")
    go:AddComponent(typeof(RectTransform))
    go.transform.position = Vector3.zero
    ---@type UnityEngine.Canvas
    local can = go:AddComponent(typeof(Canvas))
    can.renderMode = CS.UnityEngine.RenderMode.ScreenSpaceOverlay
    can.pixelPerfect = false
    can.sortingOrder = 1

    go:AddComponent(typeof(CS.UnityEngine.UI.GraphicRaycaster))
    TaskUI.root = go.transform
    
    local camObj = GameObject("UICamera")
    camObj.layer = LayerMask.NameToLayer("UI")
    camObj.transform.parent = go.transform
    camObj.transform.localPosition = Vector3(0, 0, -100)

    ---@type UnityEngine.Camera
    local cam = camObj:AddComponent(typeof(Camera))
    ---@type UnityEngine.Rendering.Universal.UniversalAdditionalCameraData
    local cameraData = camObj:AddComponent(typeof(Universal.UniversalAdditionalCameraData))
    cameraData:SetRenderer(1)
    cameraData.renderPostProcessing = false
    cameraData.renderShadows = false
    cameraData.renderType = Universal.CameraRenderType.Overlay
    cam.depth = 200
    cam.clearFlags = CS.UnityEngine.CameraClearFlags.Depth
    cam.orthographic = true
    can.worldCamera = cam
    cam.cullingMask = 1 << 5
    cam.nearClipPlane = -50
    cam.farClipPlane = 50

    TaskUI.uiCamera = cam
    TaskUI.AddToCameraStack()

    ---@type UnityEngine.UI.CanvasScaler
    local scaler = go:AddComponent(typeof(CS.UnityEngine.UI.CanvasScaler))
    scaler.uiScaleMode = CS.UnityEngine.UI.CanvasScaler.ScaleMode.ScaleWithScreenSize
    scaler.referenceResolution = Vector2(1920, 1080)
    scaler.screenMatchMode = CS.UnityEngine.UI.CanvasScaler.ScreenMatchMode.Expand

    ---@type UnityEngine.GameObject
    local subRoot = TaskUI.CreateSubCanvasForRoot(go.transform, 0)
    subRoot.name = "NormalRoot"
    TaskUI.Normal = subRoot.transform
    TaskUI.Normal.transform.localScale = Vector3.one

    subRoot = TaskUI.CreateSubCanvasForRoot(go.transform, 250)
    subRoot.name = "FixedRoot"
    TaskUI.Fixed = subRoot.transform
    TaskUI.Fixed.transform.localScale = Vector3.one

    subRoot = TaskUI.CreateSubCanvasForRoot(go.transform, 500)
    subRoot.name = "PopupRoot"
    TaskUI.Popup = subRoot.transform
    TaskUI.Popup.transform.localScale = Vector3.one

    local esObj = GameObject.Find("EventSystem")
    if not esObj then
        local eventObj = GameObject("EventSystem")
        eventObj.layer = LayerMask.NameToLayer("UI")
        eventObj.transform:SetParent(go.transform)
        eventObj:AddComponent(typeof(EventSystem))
        eventObj:AddComponent(typeof(CS.UnityEngine.EventSystems.StandaloneInputModule))
    end

    GameObject.DontDestroyOnLoad(go)
    TaskUI.init = true
    Debug.Log("TaskUI已初始化")
end

function TaskUI.CreateSubCanvasForRoot(root, sort)
    local go = GameObject("Canvas")
    go.transform.parent = root
    go.layer = LayerMask.NameToLayer("UI")

    ---@type UnityEngine.RectTransform
    local rect = go:AddComponent(typeof(RectTransform))
    rect:SetInsetAndSizeFromParentEdge(RectTransform.Edge.Left, 0, 0)
    rect:SetInsetAndSizeFromParentEdge(RectTransform.Edge.Top, 0, 0)
    rect.anchorMin = Vector2.zero
    rect.anchorMax = Vector2.one

    return go
end

function TaskUI.AddToCameraStack(mainCamera)
    --local cam = mainCamera or Camera.main
    --local stack = cam:GetComponent(typeof(Universal.UniversalAdditionalCameraData)).cameraStack
    --if not stack:Contains(TaskUI.uiCamera) then
    --    stack:Add(TaskUI.uiCamera)
    --end 
end

---Show
---@param uiPath string
---@param type string Normal Fixed Popup
---@return UnityEngine.GameObject
TaskUI.Show = async(function(uiPath, type)
    if not TaskUI.init then
        TaskUI.Setup()
    end
    type = type or "Normal"
    Debug.Log("[TaskUI] Open UI <color=green>{" .. uiPath .. "}</color> by type <color=green>{" .. type .. "}</color>")
    if TaskUI.allPages[uiPath] then
        TaskUI.allPages[uiPath]:SetActive(true)
        return TaskUI.allPages[uiPath]
    end

    if uiPath or uiPath ~= "" then
        local result = await(Addressable.InstantiateAsync(uiPath, TaskUI[type]))
        TaskUI.allPages[uiPath] = result
        return result
    end
end)

function TaskUI.Hide(uiPath)
    if not TaskUI.init then
        TaskUI.Setup()
    end
    if TaskUI.allPages[uiPath] then
        TaskUI.allPages[uiPath]:SetActive(false)
    end
end

function TaskUI.Get(uiPath)
    if not TaskUI.init then
        TaskUI.Setup()
    end
    if TaskUI.allPages[uiPath] then
        return TaskUI.allPages[uiPath]
    else
        return nil
    end
end

function TaskUI.Close(uiPath)
    if not TaskUI.init then
        TaskUI.Setup()
    end
    if TaskUI.allPages[uiPath] then
        Debug.Log("[TaskUI] Close UI <color=green>{" .. uiPath .. "}</color>")
        Addressable.Release(typeof(GameObject), TaskUI.allPages[uiPath])
        TaskUI.allPages[uiPath] = nil
    end
end

function TaskUI.Reset()
    if not TaskUI.init then
        TaskUI.Setup()
    end
    for _, value in pairs(TaskUI.allPages) do
        Addressable.Release(typeof(GameObject), value)
    end
    TaskUI.allPages = {}
end

function TaskUI.IsActive(uiPath)
    if not TaskUI.init then
        TaskUI.Setup()
    end
    return TaskUI.allPages[uiPath] and TaskUI.allPages[uiPath].activeSelf
end
