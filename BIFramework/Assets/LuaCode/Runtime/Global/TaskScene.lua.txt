---
--- Generated by EBGAME
--- Created by lwn.
--- DateTime: 2022/01/25 02:06:07
---

---@class TaskScene TaskScene
---======================== 面板变量 ========================
---=========================================================
local taskScene = class("TaskScene")

--region ===================== 扩展的数据类型 =====================
--- 放自定义的结构体、枚举等

--endregion

--region ======================== 基类成员 ========================

taskScene.scenes = {
    LogoScene = "Assets/__Scenes/LogoScene.unity",
    RoleScene = "Assets/__Scenes/RoleScene.unity",
    CharScene = "Assets/__Scenes/CharScene.unity",
    CharShop = "Assets/__Scenes/CharShop.unity",
    SandBoxScene = "Assets/__Scenes/SandBoxScene.unity"
}

---@private
---@type table<string, UnityEngine.ResourceManagement.ResourceProviders.SceneInstance>
taskScene.allScenes = {}

--endregion

--region ======================== 基类方法 ========================

---@param path string
---@return UnityEngine.ResourceManagement.ResourceProviders.SceneInstance
function taskScene.Get(path)
    if taskScene.allScenes[path] then
        return taskScene.allScenes[path]
    end
    return nil
end

---@param path string
---@param mode UnityEngine.SceneManagement.LoadSceneMode
taskScene.Load = async(function(path, mode)
    mode = mode or LoadSceneMode.Single
    --active = TernaryOp(active == nil, true, active)
    if taskScene.allScenes[path] then
        return taskScene.allScenes[path]
    else
        ---@type UnityEngine.ResourceManagement.ResourceProviders.SceneInstance
        local result = await(Addressable.LoadSceneAsync(path, mode))
        if mode == LoadSceneMode.Single then
            ---@private
            taskScene.allScenes = {}
        end
        taskScene.allScenes[path] = result

        return result
    end
end)

---@param path string
taskScene.Unload = async(function(path)
    if taskScene.allScenes[path] then
        local success = await(Addressable.UnloadSceneAsync(taskScene.allScenes[path]))
        if success then
            taskScene.allScenes[path] = nil
        end
    end
end)

---@param path string
---@param active boolean
---@param ignore string[] 忽略名单
function taskScene.SetRootActive(path, active, ignore)
    ignore = ignore or {}
    local result = taskScene.allScenes[path]
    if result then
        ---@type UnityEngine.GameObject[]
        local ary = result.Scene:GetRootGameObjects()
        local count = ary.Length - 1
        for i = 0, count do
            if table.indexof(ignore, ary[i].name) == false then
                ary[i]:SetActive(active)
            end
        end
    end
end

--endregion

TaskScene = taskScene()