---
--- Generated by EBGAME
--- Created by wbn.
--- DateTime: 2021/10/02 06:15:14
---

---@class LoopScrollRectTest LoopScrollRectTest
---======================== 面板变量 ========================
---@field private verticalScroll LuaListAdapter
---@field private verticalScroll_Nested LuaListAdapter
---@field private horizontalScroll_NestedGrid LuaListAdapter
---@field private horizontalScroll_RandomSize LuaListAdapter
---@field private horizontalScroll_Grid LuaGridAdapter
---@field private verticalScroll_Grid LuaGridAdapter
---@field private button_pool UnityEngine.UI.Button
---=========================================================
local LoopScrollRectTest = class("LoopScrollRectTest", target)

--region ===================== 扩展的数据类型 =====================
--- 放自定义的结构体、枚举等

--endregion

--region ======================== 基类成员 ========================

--endregion

--region ======================== 基类方法 ========================

--endregion

--region ======================== Mono接口 ========================

-----@private
---@param self LoopScrollRectTest
LoopScrollRectTest.Start = async(function(self)

    local results = awaitAll(Addressable.LoadAssetAsync(typeof(GameObject), "Assets/_DynamicAssets/Test/LoopScrollRect/ScrollCell1.prefab"),
            Addressable.LoadAssetAsync(typeof(GameObject), "Assets/_DynamicAssets/Test/LoopScrollRect/ScrollCell1_1.prefab"),
            Addressable.LoadAssetAsync(typeof(GameObject), "Assets/_DynamicAssets/Test/LoopScrollRect/ScrollCell2.prefab"),
            Addressable.LoadAssetAsync(typeof(GameObject), "Assets/_DynamicAssets/Test/LoopScrollRect/ScrollCell4.prefab"),
            Addressable.LoadAssetAsync(typeof(GameObject), "Assets/_DynamicAssets/Test/LoopScrollRect/ScrollCell5.prefab"),
            Addressable.LoadAssetAsync(typeof(GameObject), "Assets/_DynamicAssets/Test/LoopScrollRect/ScrollCell6.prefab"))

    --verticalScroll
    --这里测试根据idx奇偶来切换预制体
    self.verticalScroll.collectItemsSizes = function(idx)
        if idx % 2 == 0 then
            return 50
        else
            return 100
        end
    end
    self.verticalScroll.createViewsHolder = function(idx)
        if idx % 2 == 0 then
            return results[1]
        else
            return results[2]
        end
    end
    ---@param holder LuaItemViewsHolder
    self.verticalScroll.updateViewsHolder = function(holder)
        local transform = holder.root
        local idx = holder.ItemIndex
        local name = F "Vertical Cell {idx}";
        transform:Find("Text"):GetComponent(typeof(TextMeshProUGUI)).text = name
        transform:GetComponent(typeof(Image)).color = self:Rainbow(idx / 50.0)
        transform.gameObject.name = name
        transform:GetComponent(typeof(Button)).onClick:RemoveAllListeners()
        transform:GetComponent(typeof(Button)).onClick:AddListener(function()
            print(F("Click Button idx: {idx}, Transform name: {transform.name}", transform, idx))
        end)
    end
    self.verticalScroll:Init()
    self.verticalScroll:ResetItems(50)
    self.verticalScroll:Refresh()

    --verticalScroll_Nested
    self.verticalScroll_Nested.createViewsHolder = function(idx)
        return results[4]
    end
    ---@param holder LuaItemViewsHolder
    --self.verticalScroll_Nested.updateViewsHolder = function(holder)
    --    local transform = holder.root
    --    local idx = holder.ItemIndex
    --end
    self.verticalScroll_Nested.onRootCreated = function(holder)
        local transform = holder.root
        local idx = holder.ItemIndex
        ---@type LuaListAdapter
        local childAdapter = transform:Find("Views"):GetComponent(typeof(LuaListAdapter))
        childAdapter.createViewsHolder = function(idx2)
            return results[1]
        end
        childAdapter.updateViewsHolder = function(childHolder)
            local transform2 = childHolder.root
            local idx2 = childHolder.ItemIndex
            local name = F("{idx} - {idx2}", idx, idx2);
            transform2:Find("Text"):GetComponent(typeof(TextMeshProUGUI)).text = name
            transform2:GetComponent(typeof(Image)).color = self:Rainbow(idx2 / 50.0)
            transform2.gameObject.name = name
            transform2:GetComponent(typeof(Button)).onClick:RemoveAllListeners()
            transform2:GetComponent(typeof(Button)).onClick:AddListener(function()
                print(F("Click Button idx: {idx}, Transform name: {transform2.name}", idx, transform2))
            end)
        end
        if not childAdapter.IsInitialized then
            childAdapter:Init()
        end
        childAdapter:ResetItems(50, false, true)
    end
    self.verticalScroll_Nested.onBeforeRecycleOrDisableViewsHolder = function(holder, nIdx)
        local transform = holder.root
        ---@type LuaListAdapter
        local childAdapter = transform:Find("Views"):GetComponent(typeof(LuaListAdapter))
        childAdapter:ScrollTo(0)
        childAdapter:StopMovement()
    end
    self.verticalScroll_Nested:Init()
    self.verticalScroll_Nested:ResetItems(50)

    local CreateViewsHolder = function(idx)
        return results[3]
    end

    local randomWidths = { 100, 150, 50 }
    local UpdateViewsHolder = function(holder)
        local transform = holder.root
        local idx = holder.ItemIndex
        local name = F "Horizontal Cell {idx}";
        transform:Find("Text"):GetComponent(typeof(TextMeshProUGUI)).text = name
        transform.gameObject.name = name;
    end

    local CollectItemsSizes = function(idx)
        return randomWidths[Mathf.Abs(idx) % 3 + 1]
    end

    --horizontalScroll_NestedGrid
    self.horizontalScroll_NestedGrid.createViewsHolder = function(idx)
        return results[5]
    end
    self.horizontalScroll_NestedGrid.onRootCreated = function(holder)
        local transform = holder.root
        local idx = holder.ItemIndex
        ---@type LuaGridAdapter
        local childAdapter = transform:Find("Views"):GetComponent(typeof(LuaGridAdapter))
        childAdapter.updateCellViewsHolder = function(childHolder)
            local transform2 = childHolder.root
            local idx2 = childHolder.ItemIndex
            local name = F("{idx} - {idx2}", idx, idx2);
            transform2:Find("Views/Text"):GetComponent(typeof(TextMeshProUGUI)).text = name
            --transform2:GetComponent(typeof(Image)).color = self:Rainbow(idx2 / 50.0)
            --transform2.gameObject.name = name
        end
        if not childAdapter.IsInitialized then
            childAdapter:Init()
        end
        childAdapter:ResetItems(50, false, true)
    end
    self.horizontalScroll_NestedGrid.onBeforeRecycleOrDisableViewsHolder = function(holder, nIdx)
        local transform = holder.root
        ---@type LuaGridAdapter
        local childAdapter = transform:Find("Views"):GetComponent(typeof(LuaGridAdapter))
        childAdapter:ScrollTo(0)
        childAdapter:StopMovement()
    end
    self.horizontalScroll_NestedGrid:Init()
    self.horizontalScroll_NestedGrid:ResetItems(1000)

    --horizontalScroll_RandomSize
    self.horizontalScroll_RandomSize.createViewsHolder = CreateViewsHolder
    self.horizontalScroll_RandomSize.updateViewsHolder = UpdateViewsHolder
    self.horizontalScroll_RandomSize.collectItemsSizes = CollectItemsSizes
    self.horizontalScroll_RandomSize:Init()
    self.horizontalScroll_RandomSize:ResetItems(1000)
    self.horizontalScroll_RandomSize:ScrollTo(27)
    --horizontalScroll_Grid\
    self.horizontalScroll_Grid.updateCellViewsHolder = function(holder)
        local transform = holder.root
        local idx = holder.ItemIndex
        local name = F "Horizontal Cell {idx}";
        transform:Find("Views/Text"):GetComponent(typeof(TextMeshProUGUI)).text = name
        transform.gameObject.name = name;
    end
    self.horizontalScroll_Grid:Init()
    self.horizontalScroll_Grid:ResetItems(1000)

    --verticalScroll_Grid
    self.verticalScroll_Grid.updateCellViewsHolder = function(holder)
        local transform = holder.root
        local idx = holder.ItemIndex
        local name = F "Grid Cell {idx}";
        transform:Find("Views/Text"):GetComponent(typeof(TextMeshProUGUI)).text = name
        transform.gameObject.name = name;
    end
    self.verticalScroll_Grid:Init()
    self.verticalScroll_Grid:ResetItems(1000)

    self.button_pool.onClick:AddListener(function()
        self.verticalScroll:SmoothScrollTo(25, 1)
        self.verticalScroll_Nested:SmoothScrollTo(49, 1)
        self.horizontalScroll_NestedGrid:SmoothScrollTo(500, 1)
        self.horizontalScroll_RandomSize:SmoothScrollTo(500, 1)
        self.horizontalScroll_Grid:SmoothScrollTo(500, 1)
        self.verticalScroll_Grid:SmoothScrollTo(500, 1)
    end)
end)

function LoopScrollRectTest:Rainbow(progress)
    progress = Mathf.Clamp01(progress)
    local r = 0.0
    local g = 0.0
    local b = 0.0
    local i = math.modf(progress * 6)
    local f = progress * 6.0 - i
    local q = 1 - f

    if i % 6 == 0 then
        r = 1
        g = f
        b = 0
    elseif i % 6 == 1 then
        r = q
        g = 1
        b = 0
    elseif i % 6 == 2 then
        r = 0
        g = 1
        b = f
    elseif i % 6 == 3 then
        r = 0
        g = q
        b = 1
    elseif i % 6 == 4 then
        r = f
        g = 0
        b = 1
    elseif i % 6 == 5 then
        r = 1
        g = 0
        b = q
    end

    return Color.New(r, g, b)
end

---@private
--function LoopScrollRectTest:Awake()
--    
--end

-----@private
--function LoopScrollRectTest:OnDestroy()
--    
--end

-----@private
--function LoopScrollRectTest:OnDisable()
--    
--end

-----@private
--function LoopScrollRectTest:OnEnable()
--    
--end

-----@private
--function LoopScrollRectTest:Update()
--    
--end

--endregion

return LoopScrollRectTest