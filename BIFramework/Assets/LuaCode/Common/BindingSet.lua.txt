---
--- Generated by EBGAME
--- Created by wbn.
--- DateTime: 2021/07/28 09:37:06
---

---@class BindingSet
local _bindingSet = class("BindingSet")
_bindingSet.class = {}

---@class BindingViewModel
local _bindingViewModel = class("BindingViewModel")
_bindingViewModel.class = {}
_bindingViewModel.variable = unmanaged
_bindingViewModel.variableType = ""
_bindingViewModel.component = weak
_bindingViewModel.componentContainer = {}
_bindingViewModel.setCallback = callback
_bindingViewModel.getCallback = callback

function _bindingViewModel:ctor(component)
    self.component = component
    self.componentContainer = {}
end


---@return BindingViewModel
function _bindingViewModel:For(...)
    --所有待赋值的容器
    for _, v in pairs({ ... }) do
        table.insert(self.componentContainer, v)
    end
    return self
end

---@return BindingViewModel
function _bindingViewModel:Set(setCallback)
    self.setCallback = setCallback
    return self
end

---@return BindingViewModel
function _bindingViewModel:Get(getCallback)
    self.getCallback = getCallback
    return self
end

---@return BindingViewModel
function _bindingViewModel:To(variable)
    self.variable = variable
    self.__index = function(t, k)
        local value = {}
        for _, v in pairs(t.componentContainer) do
            table.insert(value, t.component[v])
        end

        --如果有多个返回值，直接返回table自己处理unpack
        if #value == 1 then
            value = value[1]
        end
        if t.getCallback ~= callback then
            t.getCallback(value)
        end

        --如果这里有类型有转换，返回转换后的值，只能管string number boolean
        if t.variableType ~= "" then
            if t.variableType == "string" then
                return tostring(value)
            elseif t.variableType == "number" then
                return tonumber(value)
            elseif t.variableType == "boolean" then
                return ToBoolean(value)
            end
        end
        return value
    end

    
    self.__newindex = function(t, k, v)
        local view = t.class.Binding[self.component]
        for _, property in pairs(view.componentContainer) do
            view.component[property] = v
        end

        if t.setCallback ~= callback then
            t.setCallback()
        end
    end
    
    --所有被绑定的都加入托管表
    self.class.Unmanaged[variable] = true
    --处理默认值
    local defaultValue = self.class[variable]
    if defaultValue then
        --记录下原始默认值的类型
        self.variableType = type(defaultValue)
        for _, property in pairs(self.componentContainer) do
            self.component[property] = defaultValue
        end
        self.class[variable] = nil --变量需要置空调用元方法
    end
    self.class.Binding[self.component] = self
    return self
end

---@return BindingSet
function _bindingSet.CreateBindingSet(class)
    return _bindingSet(class)
end

function _bindingSet:ctor(class)
    self.class = class
end

---AccountViewModel 绑定一个对象
---@return BindingViewModel
function _bindingSet:Bind(go)
    local v =  _bindingViewModel(go)
    v.class = self.class
    return v
end

function _bindingSet:UnBind(go)
    if self.class.Binding[go] == nil then
        Debug.Log("["..tostring(go).."] 无法注销绑定，已注销或者绑定不存在!")
    end
    self.class.Binding[go] = nil
end

return _bindingSet