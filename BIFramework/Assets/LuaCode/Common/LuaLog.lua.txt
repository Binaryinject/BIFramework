---
--- Generated by EBGAME
--- Created by wbn.
--- DateTime: 2020/10/19 04:33:17
---

local LugLog = { _version = "0.1.0" }

LugLog.valid = true
LugLog.usecolor = true
LugLog.outfile = nil
LugLog.level = "Log"

local modes = {
    { name = "Log", color = "<color=white>", },
    { name = "Warning", color = "<color=yellow>", },
    { name = "Error", color = "<color=red>", },
}

local levels = {}
for i, v in ipairs(modes) do
    levels[v.name] = i
end

local round = function(x, increment)
    increment = increment or 1
    x = x / increment
    return (x > 0 and math.floor(x + .5) or math.ceil(x - .5)) * increment
end

local format = function(...)
    if select("#", ...) > 1 then
        local t = { ... }
        return string.gsub(t[1], "{([^{}]*)}", function(s)
            return tostring(t[tonumber(s) + 1])
        end)
    else
        return tostring(...)
    end
end

for i, x in ipairs(modes) do
    LugLog[x.name] = function(...)
        if not LugLog.valid then
            return
        end
        -- Return early if we're below the log level
        if i < levels[LugLog.level] then
            return
        end

        local msg = format(...)

        -- Output to console
        if x.name == "Log" then
            print(msg)
        elseif x.name == "Warning" then
            CS.UnityEngine.Debug.LogWarning(msg)
        elseif x.name == "Error" then
            error(msg)
        end

        -- Output to log file
        --if LugLog.outfile then
        --    local nameupper = x.name:upper()
        --    local info = debug.getinfo(2, "Sl")
        --    local m = string.match(info.short_src, "[\"]([^{}]*)[\"]") or info.short_src
        --    m = string.gsub(m, Application.dataPath .. "/" .. CS.BIFramework.LuaEnvironment.LuaCodeFolder .. "/", "")
        --    m = string.gsub(m, "/", ".")
        --    m = string.gsub(m, ".lua.txt", "")
        --    local lineinfo = "[" .. m .. "]" .. ":" .. info.currentline
        --    local fp = io.open(LugLog.outfile, "a")
        --    local str = string.format("[%-6s%s] %s: %s\n",
        --            nameupper, os.date(), lineinfo, msg)
        --    fp:write(str)
        --    fp:close()
        --end

    end
end
Debug = {}
Debug.Log = LugLog.Log
Debug.LogWarning = LugLog.Warning
Debug.LogError = LugLog.Error
Debug.LogChannel = CS.XDebug.LogChannel

