--[[
-- added by wsh @ 2017-12-01
-- Lua全局工具类，全部定义为全局函数、变量
-- TODO:
-- 1、SafePack和SafeUnpack会被大量使用，到时候看需要需要做记忆表降低GC
--]]

local unpack = unpack or table.unpack

function handlerEx(method, obj)
    return function(...)
        return method(obj, ...)
    end
end

-- 解决原生pack的nil截断问题，SafePack与SafeUnpack要成对使用
function SafePack(...)
    local params = { ... }
    params.n = select('#', ...)
    return params
end

-- 解决原生unpack的nil截断问题，SafePack与SafeUnpack要成对使用
function SafeUnpack(safe_pack_tb)
    return unpack(safe_pack_tb, 1, safe_pack_tb.n)
end

-- 对两个SafePack的表执行连接
function ConcatSafePack(safe_pack_l, safe_pack_r)
    local concat = {}
    for i = 1, safe_pack_l.n do
        concat[i] = safe_pack_l[i]
    end
    for i = 1, safe_pack_r.n do
        concat[safe_pack_l.n + i] = safe_pack_r[i]
    end
    concat.n = safe_pack_l.n + safe_pack_r.n
    return concat
end

-- 闭包绑定
function Bind(self, func, ...)
    assert(self == nil or type(self) == "table")
    assert(func ~= nil and type(func) == "function")
    local params = nil
    if self == nil then
        params = SafePack(...)
    else
        params = SafePack(self, ...)
    end
    return function(...)
        local args = ConcatSafePack(params, SafePack(...))
        func(SafeUnpack(args))
    end
end

-- 回调绑定
-- 重载形式：
-- 1、成员函数、私有函数绑定：BindCallback(obj, callback, ...)
-- 2、闭包绑定：BindCallback(callback, ...)
function BindCallback(...)
    local bindFunc = nil
    local params = SafePack(...)
    assert(params.n >= 1, "BindCallback : error params count!")
    if type(params[1]) == "table" and type(params[2]) == "function" then
        bindFunc = Bind(...)
    elseif type(params[1]) == "function" then
        bindFunc = Bind(nil, ...)
    else
        error("BindCallback : error params list!")
    end
    return bindFunc
end

-- 将字符串转换为boolean值
function ToBoolean(s)
    local transform_map = {
        ["true"] = true,
        ["false"] = false,
    }

    return transform_map[s]
end

-- 深拷贝对象
function DeepCopy(object)
    local lookup_table = {}

    local function _copy(object)
        if type(object) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end

        local new_table = {}
        lookup_table[object] = new_table
        for index, value in pairs(object) do
            new_table[_copy(index)] = _copy(value)
        end

        return setmetatable(new_table, getmetatable(object))
    end

    return _copy(object)
end

-- 序列化表
function Serialize(tb, flag)
    local result = ""
    result = string.format("%s{", result)

    local filter = function(str)
        str = string.gsub(str, "%[", " ")
        str = string.gsub(str, "%]", " ")
        str = string.gsub(str, '\"', " ")
        str = string.gsub(str, "%'", " ")
        str = string.gsub(str, "\\", " ")
        str = string.gsub(str, "%%", " ")
        return str
    end

    for k, v in pairs(tb) do
        if type(k) == "number" then
            if type(v) == "table" then
                result = string.format("%s[%d]=%s,", result, k, Serialize(v))
            elseif type(v) == "number" then
                result = string.format("%s[%d]=%d,", result, k, v)
            elseif type(v) == "string" then
                result = string.format("%s[%d]=%q,", result, k, v)
            elseif type(v) == "boolean" then
                result = string.format("%s[%d]=%s,", result, k, tostring(v))
            else
                if flag then
                    result = string.format("%s[%d]=%q,", result, k, type(v))
                else
                    error("the type of value is a function or userdata")
                end
            end
        else
            if type(v) == "table" then
                result = string.format("%s%s=%s,", result, k, Serialize(v, flag))
            elseif type(v) == "number" then
                result = string.format("%s%s=%d,", result, k, v)
            elseif type(v) == "string" then
                result = string.format("%s%s=%q,", result, k, v)
            elseif type(v) == "boolean" then
                result = string.format("%s%s=%s,", result, k, tostring(v))
            else
                if flag then
                    result = string.format("%s[%s]=%q,", result, k, type(v))
                else
                    error("the type of value is a function or userdata")
                end
            end
        end
    end
    result = string.format("%s}", result)
    return result
end

---全自动代理事件注销

---@class DisposeJob
local disposeJob = class("DisposeJob")
disposeJob.removeCount = 0
disposeJob.processed = {}
disposeJob.uguiEvents = { "onClick", "onSubmit", "onEndEdit", "onDeselect", "onValidateInput", "onSelect", "onTextSelection",
                          "onEndTextSelection", "onTouchScreenKeyboardStatusChanged", "onValueChanged", "onCullStateChanged" }
disposeJob.osaEvents = { "createViewsHolder", "updateViewsHolder", "updateCellViewsHolder", "onRootCreated", "onBeforeRecycleOrDisableViewsHolder",
                         "collectItemsSizes" }

function disposeJob:RemoveOSA(v)
    for i = 1, #self.osaEvents do
        local prop = v[self.osaEvents[i]]
        if prop then
            v[self.osaEvents[i]] = nil
            self.removeCount = self.removeCount + 1
        end
    end
end

function disposeJob:RemoveTrigger(v)
    v.onClick = nil
    v.onPointerDown = nil
    v.onPointerEnter = nil
    v.onPointerExit = nil
    v.onPointerUp = nil
    v.onBeginDrag = nil
    v.onDrag = nil
    v.onEndDrag = nil
    v.onSelect = nil
    v.onUpdateSelect = nil
    v.onMove = nil
    self.removeCount = self.removeCount + 1
end

function disposeJob:RemoveUGUI(v)
    for i = 1, #self.uguiEvents do
        local prop = v[self.uguiEvents[i]]
        if prop and prop.RemoveAllListeners then
            prop:RemoveAllListeners()
            prop:Invoke()
            self.removeCount = self.removeCount + 1
        end
    end
end

function disposeJob:DisposeJobHandle(tb)
    local filter = function(vt, vs)
        if string.find(vs, "json.array") or string.find(vs, "json.object") then
            return false
        end
        return true
    end
    for __, v in pairs(tb) do
        if self.processed[v] == nil then
            self.processed[v] = true
            local valueType = type(v)
            local valueString = tostring(v)
            if filter(valueType, valueString) then
                --printf("%s  %s", valueType, valueString)
                if valueType == "userdata" and string.find(valueString, "%(UnityEngine.UI") then
                    self:RemoveUGUI(v)
                elseif valueType == "userdata" and string.find(valueString, "%(EventTriggerListener") then
                    self:RemoveTrigger(v)
                elseif valueType == "userdata" and string.find(valueString, "%(LuaGridAdapter") or
                        string.find(valueString, "%(LuaListAdapter")then
                    self:RemoveOSA(v)
                elseif not rawequal(v, tb) and rawequal(valueType, "table") then
                    self:DisposeJobHandle(v)
                end
            end
        end
    end
end

function DisposeAllListeners(tb)
    local dispose = disposeJob()
    dispose:DisposeJobHandle(tb) 
    --printf("回收【%s】代理事件数量： %s", tb.super.__classname, dispose.removeCount)
end

---三目运算符
function TernaryOp(flag, trueValue, falseValue)
    return (flag and { trueValue } or { falseValue })[1]
end

function FixedVector3(vector3, digit)
    return Vector3(Round(vector3.x, digit), Round(vector3.y, digit), Round(vector3.z, digit))
end

function ToVector3Int(coord)
    local sp = string.split(coord, ",")
    return Vector3Int(tonumber(sp[1]), tonumber(sp[2]), tonumber(sp[3]))
end

function ToVector3(coord)
    local sp = string.split(coord, ",")
    return Vector3(tonumber(sp[1]), tonumber(sp[2]), tonumber(sp[3]))
end

function Round(value, digit)
    digit = digit or 4
    return CS.System.Math.Round(value, digit, CS.System.MidpointRounding.AwayFromZero)
end

function WithinDistance(vec1, vec2, distance)
    local v = Vector3.New(vec2.x - vec1.x, vec2.y - vec1.y, vec2.z - vec1.z)
    return v:SqrMagnitude() <= distance * distance
end

function SetBehaviorEnable(cmp, enable)
    enable = enable or true
    UnityBridge.SetBehaviorEnable(cmp, enable)
end

--- Change the color of Image Component on UI
function ImageChangeColor(img, r, g, b, a)
    local tempColor = img.color
    tempColor.r = r
    tempColor.g = g
    tempColor.b = b
    tempColor.a = a
end

function LuaRandom(lower, greater)
    if math.type(lower) == "float" or math.type(greater) == "float" then
        return lower + math.random() * (greater - lower);
    else
        return math.random(lower, greater)
    end
end

function GetAnchoredPosition(pos, rectCanvas, offset)
    offset = offset or Vector2.zero
    local sizeDelta = Vector2.For(rectCanvas.sizeDelta)
    local vector = Vector3.For(Camera.main:WorldToViewportPoint(pos))
    local vector2 = Vector2.New(vector.x - 0.5, vector.y - 0.5)
    local v = Vector2.New(vector2.x * sizeDelta.x, vector2.y * sizeDelta.y);
    return v + offset;
end

---多功能字符串注入
function TextInject(text)
    local NAME = Player.Name
    text = F(text)
    return text
end