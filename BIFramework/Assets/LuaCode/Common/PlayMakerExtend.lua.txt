---
--- Generated by EBGAME
--- Created by wbn.
--- DateTime: 2023/2/10 16:20
---

---@class PlayMakerExtend
---@field Dialogue fun(self:PlayMakerExtend, fsm:HutongGames.PlayMaker.FsmStateAction, name:string, text:string, choices:table)
---@field UIPanel fun(self:PlayMakerExtend, fsm:HutongGames.PlayMaker.FsmStateAction, id:string, type:string)
---@field CommandLuaTask fun(self:PlayMakerExtend, fsm:HutongGames.PlayMaker.FsmStateAction, command:string, param:table)
local extend = {}

function extend:TextInject(text)
    return TextInject(text)
end

function extend:FsmPlayDown()
    Player.Hero.FsmPlay = false 
    Map.SandBoxBuilder:StopFsmTemplate()
end

---@param self PlayMakerExtend
extend.Dialogue = async(function(self, fsm, param, choices)
    ---@type UIDialogPanel
    local panel = await(UIPanel.UIDialogPanel:Open())
    panel:GetComponent(typeof(CanvasGroup)).blocksRaycasts = true
    param.text = self:TextInject(param.text)
    panel:SetContent(fsm, param, choices)
end)

---@param self PlayMakerExtend
extend.MapTip = async(function(self, fsm, param)
    ---@type UIMapTipPanel
    local panel = await(UIPanel.UIMapTipPanel:Open("Popup"))
    panel:GetComponent(typeof(CanvasGroup)).blocksRaycasts = true
    await(panel:SetContent(fsm, param))
end)

---@param self PlayMakerExtend
extend.UIPanel = async(function(self, fsm, param)
    if param.type == "OPEN" then
        await(UIPanel[param.id]:Open())
    elseif param.type == "CLOSE" then
        await(UIPanel[param.id]:Close())
    elseif param.type == "HIDE" then
        UIPanel[param.id]:Hide()
    end
    fsm:Finish()
end)

extend.WaitMapAction = async(function(self, fsm, map, action)
    local taskSource = UniTaskCompletionSource()
    Game.OnMapIdParam = map
    if action == 0 then
        Game.OnMapIntro = taskSource
    elseif action == 1 then
        Game.OnMapExit = taskSource
    end
    await(taskSource.Task)
    taskSource = nil
    fsm:Finish()
end)

extend.LoadMap = async(function(self, fsm, map, closeUI)
    await(Game:Play(map, nil, nil, nil, closeUI))
    fsm:Finish()
end)

extend.LoadHomeMap = async(function(self, fsm)
    await(Game:BackToHomeMap())
    fsm:Finish()
end)

extend.ChangeName = async(function(self, fsm)
    await(NetMgr:ChangeName())
    fsm:Finish()
end)

extend.CreateClothes = async(function(self, fsm, fsmEvent)
    ---@type UIDressPanel
    local panel = await(UIPanel.UIDressPanel:Open())
    panel:ShowGuidePanelView(true)
    panel.buttonBack.gameObject:SetActive(false)
    local taskSource = UniTaskCompletionSource()
    panel.onConfirmTask = taskSource
    await(taskSource.Task)
    taskSource = nil
    await(panel:DestroyProcess())
    await(UIPanel.UIDressPanel:Close())
    fsm.Fsm:Event(fsmEvent)
end)

function extend:InputAuthority(input)
    Map:GetShareHero(Player.ID).enableInput:Set(input)
end

extend.InteractionAuthority = async(function(self, input)
    await(Game:HideNormalUIPanel(input))
    if not input then
        Map:GetShareHero(Player.ID).curInteractionType:Set(InteractionType.None)
    end
    Player.Hero:SetInteraction({})
    Player.Hero.InteractionInfo = nil
end)

extend.SetGuideMode = async(function(self, fsm, enable, quit)
    if quit then
        awaitAll(Game:ShowPlayerInfoPanel(true, false),
                Game:ShowExplorePanel(true),
                Game:ShowEntrancePanel(true),
                Game:ShowTeamPanel(true))
        Player.Hero.universalCharacter.OperationPanel:OnlyMoveAndJump(true)
    else
        awaitAll(Game:ShowPlayerInfoPanel(enable, false),
                Game:ShowExplorePanel(false),
                Game:ShowEntrancePanel(false),
                Game:ShowTeamPanel(false))
        Player.Hero.universalCharacter.OperationPanel:OnlyMoveAndJump(false)
    end
    if fsm then
        fsm:Finish() 
    end
end)

extend.SetPlayerPause = async(function(self, fsm, pause)
    Map:GetShareHero(Player.ID).pause:Set(pause)
    fsm:Finish()
end)

extend.RecordIncidentAndCheckTask = function(self, type, param)
    Map:RecordIncidentAndCheckTask({ type = type, params = param })
end

extend.SetGuideID = async(function(self, fsm, id)
    local success = await(NetMgr:SetGuideID(id))
    if success then
        fsm:Finish()
    end
end)

extend.GuideSwitch = function(self, fsm, choices)
    for i = 1, #choices do
        if Player.Guides[choices[i].id] then
            fsm.Fsm:Event(choices[i].event)
            return
        end
    end
    fsm:Finish()
end

extend.CommandLuaTask = async(function(self, fsm, command, param)
    local wfc = Map.SandBoxBuilder.wfcGenerator
    if command == "HidePrototype" then
        wfc.propertiesTransform:Find(param.coord).gameObject:SetActive(false)
    elseif command == "ShowPrototype" then
        wfc.propertiesTransform:Find(param.coord).gameObject:SetActive(true)
    elseif command == "ShowDeleteButtonView" then
        ---@type UIGuideBuildPanel
        local panel = UIPanel.UIGuideBuildPanel:Get():GetLuaBehaviour(UIPanel.UIGuideBuildPanel:GetBehavior())
        panel:ShowDeleteButtonView(ToBoolean(param.show))
        if ToBoolean(param.show) then
            await(panel:GuideButtonAsync("Delete"))
            panel:ClickDeleteModule()
        end
    elseif command == "RemoveRockClick1" then
        local v3Int = wfc.gridKeys[21254]
        ---@type UIGuideBuildPanel
        local panel = UIPanel.UIGuideBuildPanel:Get():GetLuaBehaviour(UIPanel.UIGuideBuildPanel:GetBehavior())
        panel:ShowRockClick1(ToBoolean(param.show))
        if ToBoolean(param.show) then
            local rect = TaskUI.root:GetComponent(typeof(RectTransform))
            local pos = UnityBridge.WorldToCanvasPosition(rect, wfc.gridPositions[v3Int])
            panel.buttonRock1.transform:GetComponent(typeof(RectTransform)).anchoredPosition = Vector2(pos.x, pos.y)
            await(panel:GuideButtonAsync("Rock1"))
            await(wfc:CollapseGrids(v3Int, false))
        end
    elseif command == "RemoveRockClick2" then
        local v3Int = wfc.gridKeys[21255]
        ---@type UIGuideBuildPanel
        local panel = UIPanel.UIGuideBuildPanel:Get():GetLuaBehaviour(UIPanel.UIGuideBuildPanel:GetBehavior())
        panel:ShowRockClick2(ToBoolean(param.show))
        if ToBoolean(param.show) then
            local rect = TaskUI.root:GetComponent(typeof(RectTransform))
            local pos = UnityBridge.WorldToCanvasPosition(rect, wfc.gridPositions[v3Int])
            panel.buttonRock2.transform:GetComponent(typeof(RectTransform)).anchoredPosition = Vector2(pos.x, pos.y)
            await(panel:GuideButtonAsync("Rock2"))
            await(wfc:CollapseGrids(v3Int, false))
        end
    elseif command == "AddHouseClick1" then
        ---@type UIGuideBuildPanel
        local panel = UIPanel.UIGuideBuildPanel:Get():GetLuaBehaviour(UIPanel.UIGuideBuildPanel:GetBehavior())
        panel:ShowRockClick1(ToBoolean(param.show))
        if ToBoolean(param.show) then
            await(panel:GuideButtonAsync("Rock1"))
            await(wfc:CollapseGrids(wfc.gridKeys[21254]))
        end
    elseif command == "AddHouseClick2" then
        ---@type UIGuideBuildPanel
        local panel = UIPanel.UIGuideBuildPanel:Get():GetLuaBehaviour(UIPanel.UIGuideBuildPanel:GetBehavior())
        panel:ShowRockClick2(ToBoolean(param.show))
        if ToBoolean(param.show) then
            await(panel:GuideButtonAsync("Rock2"))
            await(wfc:CollapseGrids(wfc.gridKeys[21255]))
        end
    elseif command == "ShowBlockBagView" then
        ---@type UIGuideBuildPanel
        local panel = UIPanel.UIGuideBuildPanel:Get():GetLuaBehaviour(UIPanel.UIGuideBuildPanel:GetBehavior())
        await(panel:ShowBlockBagView(ToBoolean(param.show)))
        if ToBoolean(param.show) then
            await(panel:AwaitScrollItem())
        end
    end
    if fsm then
        fsm:Finish()
    end 
end)

return extend
