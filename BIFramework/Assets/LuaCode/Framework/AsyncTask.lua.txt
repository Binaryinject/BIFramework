require("Framework.System")

local Executors = require("Framework.Executors")

---
--LuaTaskAwaiter
--@module LuaTaskAwaiter
local TaskAwaiter = classL("TaskAwaiter")
function TaskAwaiter:ctor()
    self.IsCompleted = false
    self.Packaged = false
    self.actions = {}
end

function TaskAwaiter:GetException()
    return self.exception
end

function TaskAwaiter:GetResult()
    if not self.IsCompleted then
        error("The task is not finished yet")
    end
    if self.exception then
        error(self.exception)
    end

    return self.result
end

function TaskAwaiter:SetResult(result, exception, packaged)
    if exception then
        self.exception = exception
    else
        self.result = result
    end

    self.IsCompleted = true
    self.Packaged = packaged

    if not self.actions then
        return
    end

    for _, v in pairs(self.actions) do
        if v then
            xpcall(v, function(err)
                error(err)
            end)
        end
    end
end

function TaskAwaiter:OnCompleted(action)
    if not action then
        return
    end

    if self.IsCompleted then
        xpcall(action, function(err)
            error(err)
        end)
        return
    end

    table.insert(self.actions, action)
end

---AsyncTask
---@class AsyncTask
--@module AsyncTask
local M = classL("AsyncTask", TaskAwaiter)

function async(action)
    return function(...)
        local task = M()
        if type(action) ~= 'function' then
            task:SetResult(nil, "please enter a function")
            return task
        end

        local co = coroutine.create(function(...)
            local results = table.pack(xpcall(action, function(err)
                task:SetResult(nil, err, false)
                CS.UnityEngine.Debug.LogError(err .. "\n\n" .. debug.traceback())
            end, ...))

            local status = results[1]
            if status then
                table.remove(results, 1)
                if #results <= 1 then
                    task:SetResult(results[1], nil, false)
                else
                    task:SetResult(results, nil, true)
                end
            end
        end)
        coroutine.resume(co, ...)
        return task
    end
end

function await(result)
    assert(result ~= nil, "The result is nil")

    local status, awaiter
    if type(result) == 'table' and iskindof(result, "TaskAwaiter") then
        awaiter = result
    elseif type(result) == 'userdata' or type(result) == 'table' then
        status, awaiter = pcall(result.GetAwaiter, result)
        if not status then
            error("The parameter of the await() is error,not found the GetAwaiter() in the " .. tostring(result))
        end
    else
        error("The parameter of the await() is error, this is a function, please enter a table or userdata")
    end

    if not awaiter.IsCompleted then
        local id = coroutine.running()
        awaiter:OnCompleted(function()
            coroutine.resume(id)
        end)

        coroutine.yield()
    end

    local value = awaiter:GetResult()
    if type(value) == 'table' and awaiter.Packaged then
        return table.unpack(value)
    else
        return value
    end
end

function awaitAll(...)
    assert(... ~= nil, "The input is nil")
    local results = { ... }
    local rCount = #results
    if rCount == 1 then
        if type(results[1]) == 'table' and not iskindof(results[1], "TaskAwaiter") and type(results[1]) ~= 'userdata' then
            results = results[1]
            rCount = #results
        end
    end
    
    if rCount == 0 then
        return {}
    end
    local complete = 0
    local awaiterTasks = {}
    local values = {}
    local id = coroutine.running()
    for i = 1, rCount do
        local status, awaiter
        local result = results[i]
        if type(result) == 'table' and iskindof(result, "TaskAwaiter") then
            awaiter = result
        elseif type(result) == 'userdata' or type(result) == 'table' then
            status, awaiter = pcall(result.GetAwaiter, result)
            if not status then
                error("The parameter of the awaitAll() is error,not found the GetAwaiter() in the " .. tostring(result))
            end
        else
            error("The parameter of the awaitAll() is error, this is a function, please enter a table or userdata")
        end

        awaiterTasks[i] = awaiter

        if awaiter.IsCompleted then
            complete = complete + 1
        else
            awaiter:OnCompleted(function()
                complete = complete + 1
                if complete == rCount then
                    coroutine.resume(id)
                end
            end)
        end

    end

    if complete ~= rCount then
        coroutine.yield()
    end

    for i = 1, rCount do
        local value = awaiterTasks[i]:GetResult()
        if type(value) == 'table' and awaiterTasks[i].Packaged then
            values[i] = table.unpack(value)
        else
            values[i] = value
        end
    end

    return values
end

function try(block)
    local main = block[1]
    local catch = block.catch
    local finally = block.finally

    local results = table.pack(pcall(main))
    local status = results[1]
    local e = results[2]
    table.remove(results, 1)
    local result = results
    local catched = false
    if (not status) and catch and type(catch) == 'function' then
        catched = true
        local results = table.pack(pcall(catch, e))
        if results[1] then
            table.remove(results, 1)
            result = results
            e = nil
        else
            e = results[2]
        end
    end

    if finally and type(finally) == 'function' then
        pcall(finally)
    end

    if status then
        return table.unpack(result)
    elseif catched then
        if not e then
            return table.unpack(result)
        else
            error(e)
        end
    else
        error(e)
    end
end

function M.Delay(millisecond)
    local action = async(function(millisecond)
        await(Executors.RunLuaOnCoroutine(function(delay)
            local wait = CS.UnityEngine.WaitForSecondsRealtime(delay)
            coroutine.yield(wait)
        end, millisecond / 1000.0))
    end)

    return action(millisecond)
end

function M.Run(func, ...)
    local action = async(func)
    return action(...)
end

return M
